using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.WebSockets;
using Microsoft.Extensions.Hosting;
using System.Collections.Generic;
using System.Net.WebSockets;
using System.Text;
using System.Threading;

var builder = WebApplication.CreateBuilder(args);

// Configure WebSockets
builder.Services.AddWebSockets(options =>
{
    options.KeepAliveInterval = TimeSpan.FromSeconds(120);
});

// Configure server URL to allow connections from all network interfaces (public IP)
builder.WebHost.UseUrls("http://0.0.0.0:5000");  // Listen on all interfaces
var app = builder.Build();

var connectedClients = new List<WebSocket>();

app.UseWebSockets();

app.MapGet("/", () => "WebSocket Chat Server");

app.Use(async (context, next) =>
{
    if (context.WebSockets.IsWebSocketRequest)
    {
        var socket = await context.WebSockets.AcceptWebSocketAsync();
        lock (connectedClients)
        {
            connectedClients.Add(socket);
        }
        await HandleWebSocket(socket);
    }
    else
    {
        await next();
    }
});

async Task HandleWebSocket(WebSocket socket)
{
    var buffer = new byte[1024 * 4];
    WebSocketReceiveResult result;

    try
    {
        while (socket.State == WebSocketState.Open)
        {
            result = await socket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
            if (result.MessageType == WebSocketMessageType.Text)
            {
                var message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                BroadcastMessage(message);
            }
            else if (result.MessageType == WebSocketMessageType.Close)
            {
                break;
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"WebSocket error: {ex.Message}");
    }
    finally
    {
        lock (connectedClients)
        {
            connectedClients.Remove(socket);
        }
        await socket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Closed", CancellationToken.None);
    }
}

void BroadcastMessage(string message)
{
    var buffer = Encoding.UTF8.GetBytes(message);
    lock (connectedClients)
    {
        foreach (var client in connectedClients)
        {
            if (client.State == WebSocketState.Open)
            {
                // Sending message asynchronously
                client.SendAsync(new ArraySegment<byte>(buffer), WebSocketMessageType.Text, true, CancellationToken.None);
            }
        }
    }
}

// Run the app
app.Run();
